 /******************************************************************************************
 * This code was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"github.com/mgenware/go-packagex/v5/dbx"
)

// TableTypePosts ...
type TableTypePosts struct {
}

// Posts ...
var Posts = &TableTypePosts{}

// ------------ Actions ------------

// PostsTableSelectPostsResult ...
type PostsTableSelectPostsResult struct {
	ID       uint64
	Title    string
	Content  string
	UserID   uint64
	UserName string
	UserAge  int
}

// SelectPosts ...
func (da *TableTypePosts) SelectPosts(queryable dbx.Queryable, limit, offset int) ([]*PostsTableSelectPostsResult, error) {
	rows, err := queryable.Query("SELECT `posts`.`id` AS `id`, `posts`.`title` AS `title`, `posts`.`content` AS `content`, `posts`.`user_id` AS `userID`, `join_1`.`name` AS `userName`, `join_1`.`age` AS `userAge` FROM `posts` AS `posts` INNER JOIN `users` AS `join_1` ON `join_1`.`id` = `posts`.`user_id` LIMIT ? OFFSET ?", limit, offset)
	if err != nil {
		return nil, err
	}
	result := make([]*PostsTableSelectPostsResult, 0, limit)
	defer rows.Close()
	for rows.Next() {
		item := &PostsTableSelectPostsResult{}
		err = rows.Scan(&item.ID, &item.Title, &item.Content, &item.UserID, &item.UserName, &item.UserAge)
		if err != nil {
			return nil, err
		}
		result = append(result, item)
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return result, nil
}
